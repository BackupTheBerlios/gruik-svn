#!/usr/bin/env python2.4
# -*- coding: iso-8859-1 -*-

# $Id$

"""
Another TCPIP sniffer.
"""

from gruik.version import __version__

__author__ = "Olivier Laurent <olilau@gmail.com>"
__copyright__ = "Copyright (c) 2005 Olivier Laurent"
__license__ = "GPL"
__version__ = __version__
__date__ = "18/09/2005"

from gruik.tools import cmdline as clf
from scapy import *
from gruik.config.gruikconf import TemplateDict, GruikConf
from gruik.tools.log_manager import logger
from gruik.daemoni import Daemoni
from string import Template

#conf.L3socket=L3RawSocket


class Sniff(object):
    def __init__(self, Args):
        self.results = None
        #self.persistence = Persist()
        self.count = int(Args['count'])
        self.filter = Args['filter']
        self.prn = Args['prn']
        self.timestr = Args['timestr']
        self.conf = Args['conf']
        self.templateDict = TemplateDict()

    def run(self):
        self.results = sniff(count=self.count, prn=lambda x: self.process_packet(x), filter=self.filter)

    def daemonize(self, action):
        pass
        D = Daemoni(stdout=self.conf.getValue('logfile', 'SETTINGS'),
                    stderr=self.conf.getValue('error_logfile', 'SETTINGS'),
                    pidfile='/var/run/gruik.pid')
        D.startstop(action)
        self.run()
        #D = Daemoni(stdout='/tmp/daemoni.log',
        #            stderr='/tmp/daemoni-error.log',
        #            pidfile='/tmp/daemoni.pid')

    def profile(self): # {{{1
        try:
            import hotshot, hotshot.stats
            p = hotshot.Profile('hotshot.log')
            p.start()
            self.results = sniff(count=self.count, prn=lambda x: self.process_packet(x))
        finally:
            p.stop()
            stats = hotshot.stats.load("hotshot.log")
            stats.strip_dirs().sort_stats(-1).print_stats()
            stats.sort_stats('time').print_stats(30) # }}}1

    def process_packet(self, packet):
        self.templateDict.packet = packet
        has_theme = self.conf.getValue('theme', 'SETTINGS')
        if has_theme:
            theme = self.templateDict.theme_dict()
            keys = theme.keys()
            for key in keys:
                self.prn = self.prn.replace('$%s' % key, theme[key])
        dicos = self.templateDict.color_dict()
        dicos.update(self.templateDict.packet_dict())
        dicos.update(self.templateDict.time_dict(self.timestr))
        return Template(self.prn).substitute(dicos)


class Dispatcher:
    """
    Redirects to the correct action based on the command line options.
    Parameter(s): an Args object.
    """
    def __init__(self, Args, conf):
        self.Args = Args
        kwargs = {'filter': self.Args.options.filter,
                  'logfile': self.Args.options.logfile,
                  'count': self.Args.options.count,
                  'prn': self.Args.options.prn,
                  'timestr': self.Args.options.timestr,
                  'filter': self.Args.options.filter,
                  'daemon': self.Args.options.daemon_action,
                  'conf': conf
                 }
        self.Sniff = Sniff(kwargs)

    def dispatch(self):
        """Redirect to the correct action"""
        daemon_action = self.Args.options.daemon_action
        if daemon_action:
            self.Sniff.daemonize(daemon_action)
        else:
            self.Sniff.run()
        #self.Sniff.profile()


def _main():
    """int main(void)"""
    # Prog:
    usage = '[options]'
    Prog = clf.Prog(__version__, usage)
    # Config:
    conf = GruikConf
    default = conf.getValue
    defaults = dict(logfile=default('logfile'), error_logfile=default('error_logfile'), count=default('count'),
                    filter=default('filter'), prn=default('prn'), timestr=default('timestr'))
    # Opts:
    Opt = clf.Option
    Opts = [Opt('', '--logfile', "store", "logfile", ' <FILENAME>', default=defaults['logfile'],
                help="Store log messages in filename <FILENAME>.\nDefault: %s" % defaults['logfile']),
            Opt('', '--error-logfile', "store", "error_logfile", ' <FILENAME>', default=defaults['error_logfile'],
                help="Store error messages in filename <FILENAME>.\nDefault: %s" % defaults['error_logfile']),
            Opt('-c', '--count', "store", "count", ' <COUNT>', default=defaults['count'],
                help="Count <COUNT> packets before exiting.\nDefault: %s" % defaults['count']),
            Opt('-p', '--prn', "store", "prn", ' <PRINT_EXPR>', default=defaults['prn'],
                help="Print packet information using <PRINT_EXPR> expression.\nDefault: %s" % defaults['prn']),
            Opt('-t', '--time-format', "store", "timestr", ' <TIME_FORMAT>', default=defaults['timestr'],
                help="Print time according to <TIME_FORMAT>.\nDefault: %s" % defaults['timestr']),
            Opt('-f', '--filter', "store", "filter", ' <FILTER_EXPR>', default=defaults['filter'],
                help="Show packets that match <FILTER_EXPR>\nDefault: %s" % defaults['filter']),
            Opt('-d', '--daemon', "store", "daemon_action", None,
                help="Daemon action (start, stop, restart, status).")
           ]

    Args = clf.Args(Prog, 0, Opts)
    Dispatcher(Args, conf).dispatch()

if __name__ == '__main__':
    _main()


# vi: foldmethod=marker

